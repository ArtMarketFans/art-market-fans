/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "../../types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type TokenCreated = ContractEventLog<{
  token: string;
  name: string;
  symbol: string;
  0: string;
  1: string;
  2: string;
}>;

export interface ProjectTokenFactory extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ProjectTokenFactory;
  clone(): ProjectTokenFactory;
  methods: {
    createToken(
      _name: string,
      _symbol: string,
      _totalShare: number | string | BN,
      _ammShare: number | string | BN,
      _authorShare: number | string | BN,
      _amm: string,
      _author: string
    ): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    tokens(arg0: string): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;
  };
  events: {
    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    TokenCreated(cb?: Callback<TokenCreated>): EventEmitter;
    TokenCreated(
      options?: EventOptions,
      cb?: Callback<TokenCreated>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "TokenCreated", cb: Callback<TokenCreated>): void;
  once(
    event: "TokenCreated",
    options: EventOptions,
    cb: Callback<TokenCreated>
  ): void;
}
