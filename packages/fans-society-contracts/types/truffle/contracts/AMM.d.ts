/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface AMMContract extends Truffle.Contract<AMMInstance> {
  "new"(
    _fansSocietyAddress: string,
    _wethTokenAddress: string,
    _tokenFactoryAddress: string,
    _poolFactoryAddress: string,
    meta?: Truffle.TransactionDetails
  ): Promise<AMMInstance>;
}

export interface Committed {
  name: "Committed";
  args: {
    id: BN;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

export interface ProjectCreated {
  name: "ProjectCreated";
  args: {
    id: BN;
    name: string;
    symbol: string;
    description: string;
    target: BN;
    minInvest: BN;
    maxInvest: BN;
    totalSupply: BN;
    authorAddress: string;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: string;
  };
}

export interface ProjectStatusChanged {
  name: "ProjectStatusChanged";
  args: {
    id: BN;
    status: BN;
    0: BN;
    1: BN;
  };
}

export interface TokensClaimed {
  name: "TokensClaimed";
  args: {
    projectId: BN;
    token: string;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: string;
    3: BN;
  };
}

export interface Withdrawed {
  name: "Withdrawed";
  args: {
    id: BN;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | Committed
  | OwnershipTransferred
  | ProjectCreated
  | ProjectStatusChanged
  | TokensClaimed
  | Withdrawed;

export interface AMMInstance extends Truffle.ContractInstance {
  abortProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimProjectTokens: {
    (
      _projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _projectId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  commitOnProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  commitments(
    arg0: number | BN | string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  count(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  createProject: {
    (
      _authorAddress: string,
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _minInvest: number | BN | string,
      _maxInvest: number | BN | string,
      _totalSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _authorAddress: string,
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _minInvest: number | BN | string,
      _maxInvest: number | BN | string,
      _totalSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _authorAddress: string,
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _minInvest: number | BN | string,
      _maxInvest: number | BN | string,
      _totalSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _authorAddress: string,
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _minInvest: number | BN | string,
      _maxInvest: number | BN | string,
      _totalSupply: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  launchProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  projects(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: BN;
    9: BN;
    10: string;
    11: string;
  }>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawOnProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    abortProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimProjectTokens: {
      (
        _projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _projectId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    commitOnProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    commitments(
      arg0: number | BN | string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    count(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    createProject: {
      (
        _authorAddress: string,
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _minInvest: number | BN | string,
        _maxInvest: number | BN | string,
        _totalSupply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _authorAddress: string,
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _minInvest: number | BN | string,
        _maxInvest: number | BN | string,
        _totalSupply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _authorAddress: string,
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _minInvest: number | BN | string,
        _maxInvest: number | BN | string,
        _totalSupply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _authorAddress: string,
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _minInvest: number | BN | string,
        _maxInvest: number | BN | string,
        _totalSupply: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    launchProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    projects(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: BN;
      9: BN;
      10: string;
      11: string;
    }>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawOnProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
