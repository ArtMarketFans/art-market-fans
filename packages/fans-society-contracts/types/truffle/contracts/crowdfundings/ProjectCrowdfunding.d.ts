/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ProjectCrowdfundingContract
  extends Truffle.Contract<ProjectCrowdfundingInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<ProjectCrowdfundingInstance>;
}

export interface Claimed {
  name: "Claimed";
  args: {
    id: BN;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface Committed {
  name: "Committed";
  args: {
    id: BN;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

export interface Initialized {
  name: "Initialized";
  args: {
    version: BN;
    0: BN;
  };
}

export interface ProjectCancelled {
  name: "ProjectCancelled";
  args: {
    id: BN;
    0: BN;
  };
}

export interface ProjectCreated {
  name: "ProjectCreated";
  args: {
    id: BN;
    name: string;
    description: string;
    author: string;
    target: BN;
    startsAt: BN;
    endsAt: BN;
    0: BN;
    1: string;
    2: string;
    3: string;
    4: BN;
    5: BN;
    6: BN;
  };
}

export interface TokenCreated {
  name: "TokenCreated";
  args: {
    id: BN;
    tokenAddress: string;
    0: BN;
    1: string;
  };
}

export interface Withdrawed {
  name: "Withdrawed";
  args: {
    id: BN;
    caller: string;
    amount: BN;
    0: BN;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | Claimed
  | Committed
  | Initialized
  | ProjectCancelled
  | ProjectCreated
  | TokenCreated
  | Withdrawed;

export interface ProjectCrowdfundingInstance extends Truffle.ContractInstance {
  cancelProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimOnProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  commitOnProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  commitments(
    arg0: number | BN | string,
    arg1: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  count(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  createProject: {
    (
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _startsAt: number | BN | string,
      _endsAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _startsAt: number | BN | string,
      _endsAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _startsAt: number | BN | string,
      _endsAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _name: string,
      _symbol: string,
      _description: string,
      _target: number | BN | string,
      _startsAt: number | BN | string,
      _endsAt: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _fsocietyAddress: string,
      _tokenFactoryAddress: string,
      _poolFactoryAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _fsocietyAddress: string,
      _tokenFactoryAddress: string,
      _poolFactoryAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _fsocietyAddress: string,
      _tokenFactoryAddress: string,
      _poolFactoryAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _fsocietyAddress: string,
      _tokenFactoryAddress: string,
      _poolFactoryAddress: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  projects(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: string;
    1: string;
    2: string;
    3: BN;
    4: BN;
    5: BN;
    6: BN;
    7: BN;
    8: string;
    9: string;
  }>;

  withdrawOnProject: {
    (
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    cancelProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimOnProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    commitOnProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    commitments(
      arg0: number | BN | string,
      arg1: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    count(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    createProject: {
      (
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _startsAt: number | BN | string,
        _endsAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _startsAt: number | BN | string,
        _endsAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _startsAt: number | BN | string,
        _endsAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _name: string,
        _symbol: string,
        _description: string,
        _target: number | BN | string,
        _startsAt: number | BN | string,
        _endsAt: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _fsocietyAddress: string,
        _tokenFactoryAddress: string,
        _poolFactoryAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _fsocietyAddress: string,
        _tokenFactoryAddress: string,
        _poolFactoryAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _fsocietyAddress: string,
        _tokenFactoryAddress: string,
        _poolFactoryAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _fsocietyAddress: string,
        _tokenFactoryAddress: string,
        _poolFactoryAddress: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    projects(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: string;
      1: string;
      2: string;
      3: BN;
      4: BN;
      5: BN;
      6: BN;
      7: BN;
      8: string;
      9: string;
    }>;

    withdrawOnProject: {
      (
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
